import type { NextPage } from "next";
import { FormEvent, useState, useCallback } from "react";
import Head from "next/head";
import {
    CardContent,
    CardMedia,
    Card,
    CardActionArea,
    Typography,
    TextField,
    Button,
    Grid,
    Container,
    MenuItem,
    CircularProgress,
} from "@mui/material";
import axios from "axios";
import { NormalCssProperties } from "@mui/material/styles/createTypography";
import styles from "../styles/Home.module.css";

export interface ReturnDataProps {
    firstname: string;
    middlename: string;
    lastname: string;
    roll: string;
    batch: string;
    prog: string;
}

const Home: NextPage = () => {
    const [loading, setLoading] = useState(false);
    const [prog, setProg] = useState("");
    const [batch, setBatch] = useState("");
    const [group, setGroup] = useState("");
    const [datas, setDatas] = useState<Array<ReturnDataProps>>([]);
    const programs = [
        {
            value: "BCT",
            label: "BCT",
        },
        {
            value: "BEI",
            label: "BEI",
        },
        {
            value: "BEX",
            label: "BEX",
        },
        {
            value: "BEL",
            label: "BEL",
        },
        {
            value: "BME",
            label: "BME",
        },
        {
            value: "BAR",
            label: "BAR",
        },
        {
            value: "BAE",
            label: "BAE",
        },
        {
            value: "BAS",
            label: "BAS",
        },
        {
            value: "BCE",
            label: "BCE",
        },
        {
            value: "BCH",
            label: "BCH",
        },
    ];
    const years = [
        { value: "074", label: "074" },
        { value: "075", label: "075" },
        { value: "076", label: "076" },
        { value: "077", label: "077" },
    ];
    const groups = [
        { value: "A", label: "A" },
        { value: "B", label: "B" },
        { value: "C", label: "C" },
        { value: "D", label: "D" },
        { value: "E", label: "E" },
        { value: "F", label: "F" },
        { value: "G", label: "G" },
        { value: "H", label: "h" },
    ];
    const middleStyle = {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
    } as NormalCssProperties;

    const mapMenuItems = (options: { label: string; value: string }[]) => {
        return options.map(option => (
            <MenuItem key={option.value} value={option.value}>
                {option.value}
            </MenuItem>
        ));
    };

    const formSubmitHandler = useCallback(
        async (e: FormEvent<HTMLFormElement>) => {
            e.preventDefault();
            try {
                setLoading(true);
                const response = await axios.post(
                    "http://localhost:5500/student/",
                    {
                        prog,
                        batch,
                        group,
                    }
                );
                setDatas(response.data);
            } catch (error) {
                console.log(error);
            } finally {
                setLoading(false);
            }
        },
        [prog, batch, group, setDatas]
    );

    return (
        <Container maxWidth="lg">
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <Grid
                    container
                    component="form"
                    direction={{ xs: "column", sm: "row" }}
                    spacing={{ xs: 1, sm: 2, md: 4 }}
                    onSubmit={formSubmitHandler}
                >
                    <Grid item xs={12} sm={6} md={4} lg={3}>
                        <TextField
                            id="prog"
                            select
                            name="prog"
                            label="Program"
                            value={prog}
                            fullWidth
                            onChange={event => setProg(event.target.value)}
                        >
                            {mapMenuItems(programs)}
                        </TextField>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3}>
                        <TextField
                            id="batch"
                            name="batch"
                            select
                            label="Batch"
                            value={batch}
                            fullWidth
                            onChange={event => setBatch(event.target.value)}
                        >
                            {mapMenuItems(years)}
                        </TextField>
                    </Grid>

                    <Grid item xs={12} sm={6} md={4} lg={3}>
                        <TextField
                            id="group"
                            select
                            name="group"
                            label="Group"
                            value={group}
                            fullWidth
                            onChange={event => setGroup(event.target.value)}
                        >
                            {mapMenuItems(groups)}
                        </TextField>
                    </Grid>

                    <Grid item xs={12} sm={6} md={4} lg={3}>
                        <Button type="submit" variant="contained">
                            Submit
                        </Button>
                    </Grid>
                </Grid>
            </main>

            {loading && <CircularProgress size={100} style={middleStyle} />}
            <Grid container spacing={3}>
                {!loading &&
                    datas.map(data => {
                        return (
                            <Grid
                                item
                                xs={12}
                                sm={6}
                                md={4}
                                lg={3}
                                key={data.roll}
                            >
                                <Card sx={{ width: 260 }}>
                                    <CardActionArea>
                                        <CardMedia
                                            component="img"
                                            height="140"
                                            image="/ioe.jpg"
                                            alt="Pulchowk Campus"
                                            style={{ opacity: "0.7" }}
                                        />
                                        <CardContent>
                                            <Typography
                                                gutterBottom
                                                component="div"
                                            >
                                                {`${data.firstname} ${data.middlename} ${data.lastname}`}
                                            </Typography>
                                            <Typography
                                                variant="body2"
                                                color="text.secondary"
                                            >
                                                Roll:{" "}
                                                {data.batch +
                                                    data.prog +
                                                    data.roll}
                                            </Typography>
                                        </CardContent>
                                    </CardActionArea>
                                </Card>
                            </Grid>
                        );
                    })}
            </Grid>
        </Container>
    );
};

export default Home;
